from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from botapp.keyboards.keyboard import kb_profile, kb_register, kb_register_cancel
from botapp.bot_scripts.users.views import get_user, exist_user, register_user, get_user_by_telegram, edit_user_telegram_id
from botapp.bot_scripts.users.validators import email_valid, password_valid, login_valid


class RegisterUser(StatesGroup):
    username = State()
    first_name = State()
    last_name = State()
    email = State()
    password = State()
    age = State()


async def register_profile_command(message: types.Message):
    try:
        await get_user(message.from_user.id)
    except:
        try:
            user = await get_user_by_telegram(message.from_user.username)
        except:
            await RegisterUser.username.set()
            await message.answer('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω: ', reply_markup=kb_register_cancel)
        else:
            await edit_user_telegram_id(user, message.from_user.id)
            await message.answer(f'<b>{user.first_name}</b>, –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º!',
                                 reply_markup=kb_profile, parse_mode="HTML")
    else:
        await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', reply_markup=kb_profile)


async def add_username(message: types.Message, state=FSMContext):
    if await exist_user(message.text.lower()):
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{message.text}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω',
                             parse_mode='HTML',
                             reply_markup=kb_register_cancel)
        return
    elif not login_valid(message.text):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π', reply_markup=kb_register_cancel)
        return
    async with state.proxy() as data:
        data['username'] = message.text.lower()
    await RegisterUser.next()
    await message.reply('–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', reply_markup=kb_register_cancel)


async def add_first_name(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['first_name'] = message.text
    await RegisterUser.next()
    await message.answer('–§–∞–º–∏–ª–∏—è:', reply_markup=kb_register_cancel)


async def add_last_name(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['last_name'] = message.text
    await RegisterUser.next()
    await message.answer('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:', reply_markup=kb_register_cancel)


async def add_email(message: types.Message, state=FSMContext):
    if not email_valid(message.text):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!', reply_markup=kb_register_cancel)
        return
    async with state.proxy() as data:
        data['email'] = message.text
    await RegisterUser.next()
    await message.answer('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:', reply_markup=kb_register_cancel)


async def add_password(message: types.Message, state=FSMContext):
    if not password_valid(message.text):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
                             reply_markup=kb_register_cancel)
        return
    async with state.proxy() as data:
        data['password'] = message.text
    await RegisterUser.next()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=kb_register_cancel)


async def add_age(message: types.Message, state=FSMContext):
    try:
        tg_username = message.from_user.username
    except:
        tg_username = ''
    async with state.proxy() as data:
        try:
            data['age'] = int(message.text)
        except:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=kb_register_cancel)
        else:
            await register_user(
                username=data['username'], first_name=data['first_name'], last_name=data['last_name'],
                email=data['email'], password=data['password'], age=data['age'],
                telegram_username=tg_username, telegram_id=message.from_user.id)
            await message.answer(
                f"<u>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</u>\n"
                f"–õ–æ–≥–∏–Ω: {data['username']}\n"
                f"–ò–º—è: {data['first_name']}\n"
                f"–§–∞–º–∏–ª–∏—è: {data['last_name']}\n"
                f"Email: {data['email']}\n"
                f"–ü–∞—Ä–æ–ª—å: {data['password']}\n"
                f"–¢–µ–ª–µ–≥—Ä–∞–º: {message.from_user.username}\n"
                f"Telegram_ID: {message.from_user.id}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n", reply_markup=kb_profile, parse_mode="HTML")
            await state.finish()


async def register_cancel_handler(message: types.Message, state=FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=kb_register)


def register_handler(dp):
    dp.register_message_handler(register_profile_command, Text(equals='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüîë'), state=None)
    # # —Ö–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç—É—Ç, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
    # dp.register_message_handler(register_cancel_handler, state='*', commands=['cancel_registration'])
    dp.register_message_handler(register_cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞üö´', ignore_case=True), state='*')
    dp.register_message_handler(add_username, state=RegisterUser.username)
    dp.register_message_handler(add_first_name, state=RegisterUser.first_name)
    dp.register_message_handler(add_last_name, state=RegisterUser.last_name)
    dp.register_message_handler(add_email, state=RegisterUser.email)
    dp.register_message_handler(add_password, state=RegisterUser.password)
    dp.register_message_handler(add_age, state=RegisterUser.age)
